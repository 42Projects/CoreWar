/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   vm_eval.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nfinkel <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/03/25 20:41:30 by nfinkel           #+#    #+#             */
/*   Updated: 2018/03/25 20:51:02 by nfinkel          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "corewar.h"

static t_instr		g_instr[MAX_OP]=
{
	cw_live,
	cw_ld,
	cw_st,
	cw_add,
	cw_sub,
	cw_and,
	cw_or,
	cw_xor,
	cw_zjmp,
	cw_ldi,
	cw_sti,
	cw_fork,
	cw_lld,
	cw_lldi,
	cw_lfork,
	cw_aff
};

static void			kill_process(t_proc **proc, t_proc *prev)
{
	if ((*proc)->next != NULL && prev != *proc)
		prev->next = (*proc)->next;
	if (*proc == g_cw->procs)
		g_cw->procs = (*proc)->next;
	free(*proc);
	*proc = NULL;
	return (EXIT_SUCCESS);
}

static int			check_arg(uint8_t op, uint8_t ocp, uint8_t n_arg)
{
	uint8_t		arg_type;

	arg_type = g_op_tab[op].param_type[n_arg];
	if (!arg_type && !ocp)
		return (EXIT_SUCCESS);
	else if ((arg_type & T_REG) && (ocp & REG_CODE))
		return (EXIT_SUCCESS);
	else if ((arg_type & T_DIR) && (ocp & DIR_CODE))
		return (EXIT_SUCCESS);
	else if ((arg_type & T_IND) && (ocp & IND_CODE))
		return (EXIT_SUCCESS);
	return (EXIT_FAILURE);
}

static int			check_ocp(uint8_t *pc, uint8_t *ocp)
{
	if (check_arg((*pc - 1), ((*ocp & 0xc0) >> 6), 0)
		|| check_arg((*pc - 1), ((*ocp & 0x30) >> 4), 1)
		|| check_arg((*pc - 1), ((*ocp & 0x0c) >> 2), 2))
		return (-1);
	return (0);
}

static int			exec(t_proc *proc, uint8_t *pc)
{
	if (!g_op_tab[*pc - 1].ocp || !check_ocp(pc, cw_move_ptr(pc, 1)))
	{
		cw_nc_notify(pc - g_cw->mem, g_cw->current->color, *pc);
		if (g_instr[*pc - 1](proc, pc))
			return (-1);
		cw_nc_notify(g_cw->current->pc - g_cw->mem,\
			g_cw->current->color + 5, *g_cw->current->pc);
		if (g_cw->opt.v & 4)
			cw_verbose(proc, "PUT CHAMP NAME", 0, E_OP);
		return (0);
	}
	else
		return (-1);
}

void				cw_vm_eval(t_proc *proc)
{
	// TODO need to check cycle calculation versus zaz vm
	// TODO proper ncurses color update
	if (proc->wait > 1)
		--proc->wait;
	else if (*proc->pc >= 0x1 && *proc->pc <= MAX_OP)
	{
		if (!exec(proc, proc->pc))
			proc->wait = (*proc->pc >= 0x1 && *proc->pc <= MAX_OP ?\
				g_op_tab[*proc->pc - 1].cycles - 1 : 1);
		else
		{
			if (g_cw->opt.v & 8)
				cw_verbose(proc, "PUT CHAMP NAME", 0, E_DEATH);
			kill_process();
		}
	}
	else
	{
		cw_nc_notify(proc->pc - g_cw->mem, proc->id, *proc->pc);
		proc->pc = cw_move_ptr(proc->pc, 1);
		proc->wait = 1;
	}
}
